from .utils.dataIO import fileIO
from discord.ext import commands
from .utils import checks
import datetime
import asyncio
import discord
import time
import os

class Statistics:
    def __init__(self, bot):
        self.bot = bot
        self.sent_msgs = 0
        self.recv_msgs = 0
        self.channel = fileIO('data/statistics/settings.json', 'load')
        self.sent_msgs = self.channel['SENT_MESSAGES']
        self.recv_msgs = self.channel['RECEIVED_MESSAGES']

    @commands.command(pass_context=True)
    async def livestats(self, ctx):
        message = await self.retrieve_statistics()
        await self.bot.say(message)

    @commands.command(pass_context=True)
    @checks.serverowner_or_permissions(manage_server=True)
    async def statschannel(self, ctx, *channel: discord.Channel):
        if len(channel) > 0:
            self.channel['CHANNEL_ID'] = str(channel[0].id)
            fileIO('data/statistics/settings.json', 'save', self.channel)
            message = 'Channel set to {}'.format(channel[0].mention)
        elif not self.channel['CHANNEL_ID']:
            message = 'No channel set!'
        else:
            channel = discord.utils.get(self.bot.get_all_channels(), id=self.channel['CHANNEL_ID'])
            message = 'Current channel is {}'.format(channel.mention)
        await self.bot.say(message)

    @commands.command(pass_context=True)
    @checks.serverowner_or_permissions(manage_server=True)
    async def serverlist(self, ctx):
        message = ''
        for server in self.bot.servers:
            message+= '```Name: {0.name}\nOwner: {0.owner}```'.format(server)
        await self.bot.say(message)

    async def retrieve_statistics(self):
        name = self.bot.user.name
        uptime = abs(self.bot.uptime - int(time.perf_counter()))
        up = datetime.timedelta(seconds=uptime)
        days = up.days
        hours = int(up.seconds/3600)
        minutes = int(up.seconds%3600/60)
        seconds = int(up.seconds % 60)
        avg_sent = round(self.sent_msgs / uptime, 3)
        avg_recv = round(self.recv_msgs / uptime, 3)
        users = str(len([m for m in self.bot.get_all_members()]))
        servers = str(len(self.bot.servers))
        text_channels = 0
        voice_channels = 0
        for channel in self.bot.get_all_channels():
            if channel.type == discord.ChannelType.text:
                text_channels += 1
            elif channel.type == discord.ChannelType.voice:
                voice_channels += 1
        channels = text_channels + voice_channels
        message = '**{}** has been up for **{} days, {} hours, {} minutes and {} seconds **'.format(name, str(days), str(hours), str(minutes), str(seconds))
        message+= '\n\n'
        message+= 'Connected to **{}** servers'.format(servers)
        message+= '\n'
        message+= 'Seen **{}** users'.format(users)
        message+= '\n'
        message+= 'In **{}** channels (**{}** text, **{}** voice)'.format(str(channels), str(text_channels), str(voice_channels))
        message+= '\n'
        #message+= 'Currently connected to **{}** voice channels'.format(voicecount)
        #message+= '\n'
        message+= '**{}** messages received (**{}** per second) and **{}** messages sent (**{}** per second)'.format(str(self.recv_msgs), str(avg_recv), str(self.sent_msgs), str(avg_sent))
        message+= '\n'
        message+= '**{}** active cogs with **{}** commands'.format(str(len(self.bot.cogs)), str(len(self.bot.commands)))
        message+= '\n'
        message+= 'API version **{}**'.format(discord.__version__)
        return message

    async def incoming_messages(self, msg):
        if msg.author.id == self.bot.user.id:
            self.sent_msgs += 1
        else:
            self.recv_msgs += 1
        self.channel['SENT_MESSAGES'] = self.sent_msgs
        self.channel['RECEIVED_MESSAGES'] = self.recv_msgs
        fileIO('data/statistics/settings.json', 'save', self.channel)

    async def reload_livestats(self):
        await asyncio.sleep(10)
        while self == self.bot.get_cog('Statistics'):
            if self.channel['CHANNEL_ID']:
                msg = await self.retrieve_statistics()
                channel = discord.utils.get(self.bot.get_all_channels(), id=self.channel['CHANNEL_ID'])
                messages = ''
                async for message in self.bot.logs_from(channel, limit=1):
                    messages = message
                    if message.author.name == self.bot.user.name:
                        await self.bot.edit_message(message, msg)
                if not messages:
                    await self.bot.send_message(channel, msg)
            else:
                pass
            await asyncio.sleep(2)

def check_folder():
    if not os.path.exists("data/statistics"):
        print("Creating data/statistics folder...")
        os.makedirs("data/statistics")

def check_file():
    data = {}
    data['CHANNEL_ID'] = ''
    data['SENT_MESSAGES'] = 0
    data['RECEIVED_MESSAGES'] = 0

    f = "data/statistics/settings.json"
    if not fileIO(f, "check"):
        print("Creating default settings.json...")
        fileIO(f, "save", data)

def setup(bot):
    check_folder()
    check_file()
    n = Statistics(bot)
    bot.add_cog(n)
    bot.add_listener(n.incoming_messages, "on_message")
    bot.loop.create_task(n.reload_livestats())